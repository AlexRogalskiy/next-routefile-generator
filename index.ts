import fs from "fs";
import path from "path";

import prettier from "prettier";
import { camelCase, partition } from "lodash";
import glob from "glob";

const nums = {
  "0": "oh",
  "1": "one",
  "2": "two",
  "3": "three",
  "4": "four",
  "5": "five",
  "6": "six",
  "7": "seven",
  "8": "eight",
  "9": "nine",
};

const niceName = (str: string) => {
  const numberwang = str
    .split("")
    // @ts-ignore
    .map((n) => (nums[n] ? `${nums[n]}-` : n))
    .join("");
  return camelCase(numberwang);
};

const toObj = (arr: string[]) =>
  arr.reduce(
    (acc, val) => ({
      ...acc,
      [niceName(val)]: val,
    }),
    {}
  );

const genRoutes = () => {
  glob(
    "pages/**/*.+(tsx|ts)",
    { cwd: path.resolve(__dirname, "..") },
    (error, files) => {
      const pages = files
        // Remove `pages/`
        .map((f) => f.replace(/^pages/, ""))
        // Remove extensions
        .map((f) => f.replace(/\.tsx?/, ""))
        // Remove private/custom templates
        .filter((f) => {
          const arr = f.split("/");
          const last = arr[arr.length - 1];
          return last.match(/^[^_]/);
        })
        // Correctly format index files
        .map((f) => f.replace(/\/index$/, ""));

      const [dynamic, routes] = partition(pages, (p) => p.includes("["));

      const out = {
        Routes: toObj(routes),
        DynamicRoutes: toObj(dynamic),
      };

      const file = `// WARNING: This file is auto-generated by 'generate-routes.ts', do not edit directly
export const routes = ${JSON.stringify(out)} as const`;

      fs.writeFile(
        path.join(process.cwd(), "generatedRoutes.ts"),
        prettier.format(file, {
          parser: "babel-ts",
          trailingComma: "es5",
          tabWidth: 2,
          semi: false,
          singleQuote: true,
        }),
        (err) => {
          if (err) throw err;
          return;
        }
      );
    }
  );
};

genRoutes();
